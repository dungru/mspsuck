# -*- coding: utf-8 -*-
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apis.sonic.dvt.dvt_pb2 as dvt__pb2


class DVTStub(object):
    """The greeting service definition."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.process = channel.unary_unary(
            "/ClxDVT.DVT/process",
            request_serializer=dvt__pb2.CmdMsg.SerializeToString,
            response_deserializer=dvt__pb2.ResultValue.FromString,
        )
        self.apply_config = channel.unary_unary(
            "/ClxDVT.DVT/apply_config",
            request_serializer=dvt__pb2.CmdMsg.SerializeToString,
            response_deserializer=dvt__pb2.ResultValue.FromString,
        )
        self.cling_reset = channel.unary_unary(
            "/ClxDVT.DVT/cling_reset",
            request_serializer=dvt__pb2.ClingResetParams.SerializeToString,
            response_deserializer=dvt__pb2.ResultValue.FromString,
        )


class DVTServicer(object):
    """The greeting service definition."""

    def process(self, request, context):
        """Sends a greeting"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def apply_config(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def cling_reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DVTServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "process": grpc.unary_unary_rpc_method_handler(
            servicer.process,
            request_deserializer=dvt__pb2.CmdMsg.FromString,
            response_serializer=dvt__pb2.ResultValue.SerializeToString,
        ),
        "apply_config": grpc.unary_unary_rpc_method_handler(
            servicer.apply_config,
            request_deserializer=dvt__pb2.CmdMsg.FromString,
            response_serializer=dvt__pb2.ResultValue.SerializeToString,
        ),
        "cling_reset": grpc.unary_unary_rpc_method_handler(
            servicer.cling_reset,
            request_deserializer=dvt__pb2.ClingResetParams.FromString,
            response_serializer=dvt__pb2.ResultValue.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ClxDVT.DVT", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class DVT(object):
    """The greeting service definition."""

    @staticmethod
    def process(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ClxDVT.DVT/process",
            dvt__pb2.CmdMsg.SerializeToString,
            dvt__pb2.ResultValue.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def apply_config(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ClxDVT.DVT/apply_config",
            dvt__pb2.CmdMsg.SerializeToString,
            dvt__pb2.ResultValue.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def cling_reset(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ClxDVT.DVT/cling_reset",
            dvt__pb2.ClingResetParams.SerializeToString,
            dvt__pb2.ResultValue.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
